`   미들웨어 : 요청과 응답의 중간에 위치한 익스프레스의 핵심
`   `   라우터, 에러 핸들러 등도 미들웨어의 일종
`   `   app.use와 함께 사용 [app.use(Mid) 형태]
`   미들웨어의 실행
`   `   app.use(mid) : 모든 요청에서 미들웨어 실행
`   `   app.use('/abc', mid) : abc로 시작하는 요청에서 미들웨어 실행
`   `   app.post('/abc', mid) : abc로 시작하는 POST 요청에서 미들웨어 실행

`   morgan
`   `   요청과 응답에 대한 정보를 콘솔에 기록
`   `   app.use(morgan('dev'));
`   `   `   인수 : dev, combined, common, short, tiny 등
`   `   `   보통 개발환경 - dev, 배포 환경 - combined
`   `   `   `   dev 모드 기준 콘솔 : [HTTP 메소드] [주소] [HTTP 상태 코드] [응답 속도] - [응답 바이트]

`   static
`   `   정적 파일 제공 라우터 역할
`   `   기본 제공 -> 따로 설치 X, express 객체 안에서 꺼내 장착
`   `   app.use('요청 경로', express.static('실제 경로'));
`   `   함수 인수 : 정적 파일들이 담겨있는 폴더 지정
`   `   서버 폴더 경로와 요청 경로가 다름 => 외부인이 서버의 구조를 쉽게 파악 불가 => 보안에 도움
`   `   정적 파일을 알아서 제공 => fs.readFile 등으로 파일을 직접 읽어 전송할 필요 X
`   `   요청 경로에 해당 파일 존재 X => 자동으로 내부적으로 next 호출, 파일 발견 시 다음 미들웨어 실행 X

`   body-parser
`   `   요청의 본문에 있는 데이터를 해석 -> req.body 객체로 만드는 미들웨어
`   `   폼데이터, AJAX 요청의 데이터를 처리 / 멀티파트(이미지, 동영상, 파일) 데이터는 처리 불가 -> multer모듈 사용
`   `   app.use(express.json())
`   `   app.use(express.urlencoded({extended:false}));
`   `   express에 body-parser 미들웨어의 일부 기능이 내장
`   `   body-parser를 직접 설치하는 경우 npm i body-parser
`   `   `   JSON, URL-encoded 형식 외에도 Raw(요청의 본문이 버퍼데이터), Text(텍스트 데이터 해석) 형식 데이터 추가 해석
`   `   extended:false => querystring 모듈 사용해 쿼리스트링 해석, true => qs 모듈 (npm 패키지) 사용 쿼리스트링 해석

`   cookie-parser
`   `   요청에 동봉된 쿠키를 해석해 req.cookies 객체로 만듦
`   `   app.use(cookieParser(비밀키));
`   `   유효 기간이 지난 쿠키의 경우 알아서 걸러냄
`   `   첫 인수로 비밀 키 가능
`   `   `   서명된 쿠키가 있는 경우 제공한 비밀 키를 통해 해당 쿠키가 내 서버가 만든 쿠키임을 검증
`   `   `   서명이 붙은 쿠키의 형태 : name=cookieName.sign
`   `   `   서명된 쿠키는 req.cookies 대신 req.signedCookies 객체에 들어있음
`   `   쿠키의 생성 / 제거
`   `   `   res.cookie / res.clearCookie 메소드 사용
`   `   `   res.cookie(key, value, option) (쿠키 옵션은 기본 쿠키 옵션과 동일 : domain, expires, httpOnly, maxAge, path, secure 등)
`   `   `   쿠키의 삭제 : 키, 값, 옵션 등 3가지가 정확히 일치해야 삭제됨 (expires, maxAge 제외)
`   `   `   `   옵션 중 signed는 true로 설정 시 쿠키 뒤에 서명이 붙음

`   express-session
`   `   세션 관리용 미들웨어
`   `   로그인 등의 이유로 세션 구현 / 특정 사용자를 위한 데이터를 임시적으로 저장 시 사용
`   `   세션은 사용자별로 req.session 객체 안에 유지
`   `   `   app.use(session({
`   `   `       resave : false,
`   `   `       saveUninitialized: false,
`   `   `       secret: process.env.COOKIE_SECRET,
`   `   `       cookie:{
`   `   `           httpOnly: true,
`   `   `           secure: false,    
`   `   `       },
`   `   `       name: 'session-cookie',
`   `   `   }));
`   `   인수 : 세션에 대한 설정
`   `   `   resave : 요청이 올 시 세션에 수정 사항이 없을 시 세션의 재저장 여부
`   `   `   saveUninitialized : 세션에 저장 내역이 없더라도 처음부터 세션을 생성할지 설정
`   `   